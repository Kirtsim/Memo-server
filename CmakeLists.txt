cmake_minimum_required (VERSION 3.0)

project (Memo-server LANGUAGES CXX)
add_compile_options(-std=c++17 -Wall -Wextra -Wsign-conversion)

set(CMAKE_CXX_COMPILER /usr/bin/clang++)
# variable denoting where the "absolute" include paths start in
set(BASEPATH "${CMAKE_SOURCE_DIR}/src/")

set(SOURCES src/main.cpp
            src/logger/logger.cpp
            src/logger/easylogging++.cc
            src/memo/service/BaseService.cpp
            src/memo/service/tag/TagSvc.cpp
            src/memo/service/memo/MemoSvc.cpp
            src/memo/service/memo/process/SearchProcess.cpp
            src/memo/service/memo/process/SearchByIdProcess.cpp
            src/memo/service/memo/process/CreateProcess.cpp
            src/memo/service/memo/process/DeleteProcess.cpp
            src/memo/service/memo/process/UpdateProcess.cpp
            src/memo/service/tag/process/SearchProcess.cpp
            src/memo/service/tag/process/CreateProcess.cpp
            src/memo/service/tag/process/DeleteProcess.cpp
            src/memo/service/tag/process/UpdateProcess.cpp
            src/memo/Server.cpp
            src/memo/Resources.cpp)
set(HEADERS src/logger/logger.hpp
            src/memo/service/IService.hpp
            src/memo/service/BaseService.hpp
            src/memo/service/IProcess.hpp
            src/memo/service/tag/TagSvc.hpp
            src/memo/service/memo/MemoSvc.hpp
            src/memo/service/BaseProcess.hpp
            src/memo/service/memo/process/SearchProcess.hpp
            src/memo/service/memo/process/SearchByIdProcess.hpp
            src/memo/service/memo/process/CreateProcess.hpp
            src/memo/service/memo/process/DeleteProcess.hpp
            src/memo/service/memo/process/UpdateProcess.hpp
            src/memo/service/tag/process/SearchProcess.hpp
            src/memo/service/tag/process/CreateProcess.hpp
            src/memo/service/tag/process/DeleteProcess.hpp
            src/memo/service/tag/process/UpdateProcess.hpp
            src/memo/Server.hpp
            src/memo/Resources.hpp)
set(PROTO_SVC_FILES TagSvc.proto
                    MemoSvc.proto)
set(PROTO_FILES     Tag.proto
                    Memo.proto
                    OperationStatus.proto)
list(APPEND PROTO_FILES ${PROTO_SVC_FILES})


set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")


find_package(Threads REQUIRED)

# Find Protobuf installation
# Looks for protobuf-config.cmake file installed by Protobuf's cmake installation.
set(protobuf_MODULE_COMPATIBLE TRUE)
find_package(Protobuf CONFIG REQUIRED)
message(STATUS "Using protobuf ${protobuf_VERSION}")

set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
set(_REFLECTION gRPC::grpc++_reflection)
if(CMAKE_CROSSCOMPILING)
  find_program(_PROTOBUF_PROTOC protoc)
else()
  set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
endif()

# Find gRPC installation
# Looks for gRPCConfig.cmake file installed by gRPC's cmake installation.
find_package(gRPC CONFIG REQUIRED)
message(STATUS "Using gRPC ${gRPC_VERSION}")

set(_GRPC_GRPCPP gRPC::grpc++)
if(CMAKE_CROSSCOMPILING)
  find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
else()
  set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
endif()

# Proto file
set(BLAH ${CMAKE_CURRENT_SOURCE_DIR}/src/model/proto/TagSvc.proto)
list(APPEND BLAH ${CMAKE_CURRENT_SOURCE_DIR}/src/model/proto/MemoSvc.proto)

# Generated sources
set(PROTO_SRCS)
set(PROTO_HDRS)
set(GRPC_SRCS)
set(GRPC_HRDS)
set(PROTO_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/model)
set(PROTO_DIR ${PROTO_SRC_DIR}/proto)
foreach(proto_file ${PROTO_FILES})
    get_filename_component(file_name ${proto_file} NAME_WE)

    list(APPEND PROTO_SRCS "${PROTO_SRC_DIR}/${file_name}.pb.cc")
    list(APPEND PROTO_HDRS "${PROTO_SRC_DIR}/${file_name}.pb.h")
    add_custom_command(
          OUTPUT "${PROTO_SRC_DIR}/${file_name}.pb.cc"
                 "${PROTO_SRC_DIR}/${file_name}.pb.h"
          COMMAND ${_PROTOBUF_PROTOC}
          ARGS
            --cpp_out "${PROTO_SRC_DIR}"
            -I "${PROTO_DIR}"
            "${PROTO_DIR}/${proto_file}"
          DEPENDS "${PROTO_DIR}/${proto_file}")
endforeach()

foreach(proto_file ${PROTO_SVC_FILES})
    get_filename_component(file_name ${proto_file} NAME_WE)

    list(APPEND GRPC_SRCS "${PROTO_SRC_DIR}/${file_name}.grpc.pb.cc")
    list(APPEND GRPC_HDRS "${PROTO_SRC_DIR}/${file_name}.grpc.pb.h")

    add_custom_command(
          OUTPUT "${PROTO_SRC_DIR}/${file_name}.grpc.pb.cc"
                 "${PROTO_SRC_DIR}/${file_name}.grpc.pb.h"
          COMMAND ${_PROTOBUF_PROTOC}
          ARGS --grpc_out "${PROTO_SRC_DIR}"
               --cpp_out "${PROTO_SRC_DIR}"
               -I "${PROTO_DIR}"
               --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
                "${PROTO_DIR}/${proto_file}"
          DEPENDS "${PROTO_DIR}/${proto_file}")
endforeach()

# Include generated *.pb.h files
include_directories("${PROTO_SRC_DIR}")
message("Proto src directory: ${PROTO_SRC_DIR}")

# Building server
add_executable(memo_server
    ${SOURCES}
    ${PROTO_SRCS}
    ${GRPC_SRCS})

target_link_libraries(memo_server
    ${_REFLECTION}
    ${_GRPC_GRPCPP}
    ${_PROTOBUF_LIBPROTOBUF})


# needed for "absolute" include paths
target_include_directories(memo_server PRIVATE ${BASEPATH})

target_include_directories(memo_server PRIVATE /usr/include/mysql-cppconn-8)
target_link_directories(memo_server PRIVATE /usr/lib/x86_64-linux-gnu)
target_link_libraries(memo_server mysqlcppconn8)
